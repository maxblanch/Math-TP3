#BlueJ class context
comment0.target=Matrice
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment10.params=e\ ligne\ colonne
comment10.target=void\ setElement(double,\ int,\ int)
comment11.params=
comment11.target=boolean\ estCarree()
comment12.params=
comment12.target=boolean\ estTriangulaireInferieure()
comment13.params=
comment13.target=boolean\ estTriangulaireSuperieure()
comment14.params=
comment14.target=boolean\ estDiagonale()
comment15.params=
comment15.target=boolean\ estScalaire()
comment16.params=
comment16.target=boolean\ estNulle()
comment17.params=
comment17.target=boolean\ estLigne()
comment18.params=
comment18.target=boolean\ estColonne()
comment19.params=
comment19.target=boolean\ estSymetrique()
comment2.params=nbLignes\ nbColonnes
comment2.target=Matrice(int,\ int)
comment2.text=\n\ Cree\ une\ matrice\ m\ par\ n\n
comment20.params=i\ j
comment20.target=void\ permuteLigne(int,\ int)
comment20.text=\n\ Operation\ elementaire\ sur\ les\ lignes.\n\ Permute\ la\ ligne\ i\ de\ la\ matrice\ avec\ la\ ligne\ j\ de\ la\ matrice.\n\ L_i\ <->\ L_j\n
comment21.params=i\ d
comment21.target=void\ multiplieLigne(int,\ double)
comment21.text=\n\ Operation\ elementaire\ sur\ les\ lignes.\n\ Multiplie\ la\ ligne\ i\ par\ le\ facteur\ d.\n\ L_i\ <-\ d\ *\ L_i\n
comment22.params=i\ j\ d
comment22.target=void\ ajouteMultipleLigne(int,\ int,\ double)
comment22.text=\n\ Operation\ elementaire\ sur\ les\ lignes.\n\ Ajoute\ a\ une\ ligne\ un\ multiple\ d'une\ autre\ ligne.\n\ L_i\ <-\ L_i\ +\ d\ *\ L_j\n
comment23.params=n
comment23.target=Matrice\ identite(int)
comment23.text=\n\ Construit\ une\ matrice\ identite\ n\ par\ n\n
comment24.params=e\ n
comment24.target=Matrice\ scalaire(double,\ int)
comment24.text=\n\ Construit\ une\ matrice\ scalaire\ n\ par\ n\ ayant\ le\ nombre\ e\ sur\ la\ diagonale.\n
comment25.params=mat
comment25.target=Matrice\ transpose(Matrice)
comment25.text=\n\ Retourne\ la\ matrice\ transposee\ de\ la\ matrice\ passee\ en\ argument\n
comment26.params=k
comment26.target=Matrice\ multiplieScalaire(double)
comment26.text=\n\ Multiplie\ tous\ les\ termes\ de\ la\ matrice\ par\ le\ scalaire\ k.\ \n\ Retourne\ la\ matrice\ obtenue\ (la\ matrice\ de\ depart\ est\ inchangee\ \:\ une\ nouvelle\ matrice\ est\ creee)\n
comment27.params=b
comment27.target=Matrice\ additionMatrices(Matrice)
comment27.text=\n\ Additionne\ une\ matrice\ a\ la\ matrice.\n\ Retourne\ la\ matrice\ somme\ (la\ matrice\ de\ depart\ est\ inchangee\ \:\ une\ nouvelle\ matrice\ est\ creee)\n
comment28.params=b
comment28.target=Matrice\ multiplieMatrices(Matrice)
comment28.text=\n\ Multiplie\ une\ matrice\ a\ la\ matrice.\n\ Retourne\ la\ matrice\ produit\ (la\ matrice\ de\ depart\ est\ inchangee\ \:\ une\ nouvelle\ matrice\ est\ creee)\n
comment29.params=
comment29.target=void\ question1()
comment3.params=nbLignes
comment3.target=Matrice(int)
comment3.text=\n\ Cree\ une\ matrice\ carree\ n\ par\ n\n
comment30.params=
comment30.target=void\ question2()
comment31.params=
comment31.target=void\ question3()
comment32.params=
comment32.target=void\ question4()
comment4.params=b
comment4.target=Matrice(double[][])
comment5.params=b
comment5.target=Matrice(Matrice)
comment5.text=\n\ Copie\ une\ matrice\ b\n
comment6.params=
comment6.target=void\ affiche()
comment7.params=
comment7.target=int\ getNbLignes()
comment8.params=
comment8.target=int\ getNbColonnes()
comment9.params=ligne\ colonne
comment9.target=double\ getElement(int,\ int)
numComments=33
